var umlTool : new Native("org.eclipse.epsilon.emc.uml.dt.UMLTool");

//Load profiles

//registered
var sysmlProfile = umlTool.getProfile("http://www.eclipse.org/papyrus/sysml/1.6/SysML/Blocks");

var activitiesProfile = sysmlProfile.getPackagedElement("Activities");
var allocationsProfile = sysmlProfile.getPackagedElement("Allocations");
var blocksProfile = sysmlProfile.getPackagedElement("Blocks");
var constraintBlocksProfile = sysmlProfile.getPackagedElement("ConstraintBlocks");
var deprecatedElementsProfile = sysmlProfile.getPackagedElement("DeprecatedElements");
var modelElementsProfile = sysmlProfile.getPackagedElement("ModelElements");
var portsAndFlowsProfile = sysmlProfile.getPackagedElement("PortsAndFlows");
var requirementsProfile = sysmlProfile.getPackagedElement("Requirements");

var ecoreProfile = umlTool.getProfileFromPathmapUri("pathmap://UML_PROFILES/Ecore.profile.uml");

//available in the same workspace
var amlProfile = AML!Profile.all.first();
var vceProfile = VCE!Profile.all.first();

//load libraries
// Load the standard UML primitive types library
var libURI = UML.resource.uri.createURI("platform:/plugin/org.eclipse.uml2.uml.resources/libraries/UMLPrimitiveTypes.library.uml");
var libResource = UML.resource.resourceSet.createResource(libURI);
libResource.load(null);
UML.resource.resourceSet.resources.add(libResource);

// Load the SysML standard library
var sysmlLibURI = UML.resource.uri.createURI("platform:/plugin/org.eclipse.papyrus.sysml16_2.0.0.202203311810/resources/library/SysML-Standard-Library.uml");
var sysmlLibResource = UML.resource.resourceSet.createResource(sysmlLibURI);
sysmlLibResource.load(null);
UML.resource.resourceSet.resources.add(sysmlLibResource);
sysmlLibResource.println();



//create model root
var m : new UML!Model(name="VCE");

//Ecore Profile
m.applyProfile(ecoreProfile);

//profiles application and collection of stereotype's definitions'
//SysML
m.applyProfile(sysmlProfile);

m.applyProfile(activitiesProfile); // because SysML includes many profile packages
m.applyProfile(allocationsProfile); // because SysML includes many profile packages
m.applyProfile(blocksProfile); // because SysML includes many profile packages
m.applyProfile(constraintBlocksProfile); // because SysML includes many profile packages
m.applyProfile(deprecatedElementsProfile); // because SysML includes many profile packages
m.applyProfile(modelElementsProfile); // because SysML includes many profile packages
m.applyProfile(portsAndFlowsProfile); // because SysML includes many profile packages
m.applyProfile(requirementsProfile); // because SysML includes many profile packages


var blockStereotype = blocksProfile.getPackagedElement("Block");

//AutomationML
m.applyProfile(amlProfile);
var sucStereotype = amlProfile.getPackagedElement("SUC");

//VCE
m.applyProfile(vceProfile);
var cpsElementStereotype = vceProfile.getPackagedElement("CpsElement");
var variantStereotype = vceProfile.getPackagedElement("Variant");
var designUnitStereotype = vceProfile.getPackagedElement("Design Unit");
var moduleStereotype = vceProfile.getPackagedElement("Module");


//build Model

//collection of unique IDs from the Excel document
var setId: new Set;
var setGenericId: new Set;

for (row in Excel!Matrix.all) { 
	
	var id = row.ID;
	var genericId= row.GenericID;
	
	setId.add(id);
	setGenericId.add(genericId);
	
	
	var c : new UML!Class;
	c.name = row.VariantName != "" ? row.VariantName:row.Name;
	
	m.packagedElement.add(c);
	
	//Annotation: SysML
	c.applyStereotype(blockStereotype);
	
	//annotation: AML
	c.applyStereotype(sucStereotype);
	
	//annotation: VCE
	var typeStereotype = vceProfile.getPackagedElement(row.Type);
	
	//the current Class is a Module or a DesignUnit, depending on the content of the Excel Sheet
	c.applyStereotype(typeStereotype);
	
	//we can collect all the information from the spreadsheet for each CPS element using the VCE profile
	var cpsElement = c.applyStereotype(cpsElementStereotype); 
	cpsElement.id = row.ID;
	cpsElement.genericId = row.GenericID;
	cpsElement.origin ?= row.Origin;
	
	//variant identification
	cpsElement.no ?= row.No; 
	//the baseVersion is identified by 0, variants No is greater than 0.
 	if(cpsElement.no.asFloat() > 0){
 		
 		//given the identified variant..
 		var variant = c.applyStereotype(variantStereotype); 
 		
 		//..we look for the corresponding base version of the variant Design Unit element (= an annotated UML Class)
 		var elements : Sequence = m.getPackagedElements().asSequence(); 
 		var designUnitsClasses : Sequence = elements.select(c|c.isTypeOf(UML!Class) and c.isDesignUnit()); 
 		//..as reported in the row.Name column in the spreadsheet 
 		var designUnitsClass = designUnitsClasses.selectOne(c|c.name == row.Name); 
 		//..if the base version exists the we establish the bidirectional association
 		if(not designUnitsClass.isUndefined()){
 			
			variant.baseVersion = designUnitsClass.getStereotypeApplication(designUnitStereotype);	
 			
 		}
 	}

}



"DONE".println();

operation UML!Class isDesignUnit() {
	return self.appliedStereotypes.exists(s|s.name = "Design Unit");
}

