"Loading libraries...".println();

//load libraries


"Create model root".println();
var m : new CAEX!CAEXFile(name="VCE");

"Generating model content...".println();


// nesting classes
var all_blocks : OrderedSet;

var blocks1 : OrderedSet;
var blocks2 : OrderedSet;
var blocks3 : OrderedSet;
var blocks4 : OrderedSet;


for (row in Excel!Matrix.all) { 
	
	var id = row.ID;
	var genericId= row.GenericID;

	//var p_top : UML!Package;
	var p_top : CAEX!InstanceHierarchy;

	p_top = m.packagedElements.selectOne(p|p.isTypeOf(UML!Package) and p.name == row.Name);
	p_top.println();
	if(p_top.isUndefined() and row.No == "0.0"){
		p_top = new UML!Package;
		p_top.name = row.Name;
		m.packagedElement.add(p_top);
	}
	
	//var p_variant : new UML!Package;
	var p_variant : new CAEX!InternalElement;
	
	p_variant.name = row.No == "0.0"? 
		"base_"+row.No:
		"variant_"+row.No;
		
	p_variant.name = p_variant.name.substring(0, p_variant.name.length()-2); //removing decimal part from variant number.
	p_top.packagedElement.add(p_variant);
	
	var c : new UML!Class;
	c.name = row.VariantName != "" ? 
		(row.VariantName):
		row.Name;

		
	p_variant.packagedElement.add(c);
	
	//Annotation: SysML
	c.applyStereotype(blockStereotype);
	all_blocks.add(c);
	
	//annotation: AML
	c.applyStereotype(sucStereotype);
	
	//annotation: VCE
	var typeStereotype = vceProfile.getPackagedElement(row.Type);
	
	//the current Class is a Module or a DesignUnit, depending on the content of the Excel Sheet
	c.applyStereotype(typeStereotype);
	
	//we can collect all the information from the spreadsheet for each CPS element using the VCE profile
	var cpsElement = c.applyStereotype(cpsElementStereotype); 
	cpsElement.id = row.ID;
	cpsElement.genericId = row.GenericID;
	cpsElement.origin ?= row.Origin;
	
	"Variability modeling...".println();
	cpsElement.no ?= row.No; 
	//the baseVersion is identified by 0, variants No is greater than 0.
 	if(cpsElement.no.asFloat() > 0){
 		"via VEL annotations".println();
 		var velOptionalStructuralVariationPoint = c.applyStereotype(velOptionalStructuralVariationPointStereotype);
 		all_blocks.add(c); // add the class to the set of base elements
 		
 		"via VCE annotations".println();
 		//given the identified variant..
 		var variant = c.applyStereotype(variantStereotype); 
 		//..we look for the corresponding base version of the variant Design Unit element (= an annotated UML Class)
 		var elements : Sequence = m.getPackagedElements().asSequence(); 
 		var designUnitsClasses : Sequence = elements.select(c|c.isTypeOf(UML!Class) and c.isDesignUnit()); 
 		//..as reported in the row.Name column in the spreadsheet 
 		var designUnitsClass = designUnitsClasses.selectOne(c|c.name == row.Name); 
 		//..if the base version exists the we establish the bidirectional association
 		if(not designUnitsClass.isUndefined()){
 			
			variant.baseVersion = designUnitsClass.getStereotypeApplication(designUnitStereotype);	
 			
 		}
 	}
 	
 	

}

// nesting classes
	blocks1 = all_blocks.select(b| not b.isVariant()).asOrderedSet();
	blocks2 = all_blocks.select(b| not b.isVariant()).asOrderedSet();
	blocks3 = all_blocks.select(b| not b.isVariant()).asOrderedSet();
	blocks4 = all_blocks.select(b| not b.isVariant()).asOrderedSet();
	
for (row in Excel!Matrix.all) { 
	var block1_base = blocks1.selectOne(b|b.name==row.Level1 and not b.isVariant());
	var block2_base = blocks2.selectOne(b|b.name==row.Level2 and not b.isVariant());
	var block3_base = blocks3.selectOne(b|b.name==row.Level3 and not b.isVariant());
	var block4_base = blocks4.selectOne(b|b.name==row.Level4 and not b.isVariant());
	
	var block1_variant = blocks1.selectOne(b|b.name==row.Level1 and b.isVariant());
	var block2_variant = blocks2.selectOne(b|b.name==row.Level2 and b.isVariant());
	var block3_variant = blocks3.selectOne(b|b.name==row.Level3 and b.isVariant());
	var block4_variant = blocks4.selectOne(b|b.name==row.Level4 and b.isVariant());
	

/*
Association createAssociation(boolean end1IsNavigable,
                              AggregationKind end1Aggregation,
                              java.lang.String end1Name,
                              int end1Lower,
                              int end1Upper,
                              Type end1Type,
                              boolean end2IsNavigable,
                              AggregationKind end2Aggregation,
                              java.lang.String end2Name,
                              int end2Lower,
                              int end2Upper)
*/


	if(not block2_variant.isUndefined()){
		var containmentAss = block1_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block2_variant.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block2_variant,
	                              true,
	                              UML!AggregationKind#none,
	                              block1_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}
	if (not block2_base.isUndefined()) {
		var containmentAss = block1_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block2_base.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block2_base,
	                              true,
	                              UML!AggregationKind#none,
	                              block1_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}
	
	
	if(not block3_variant.isUndefined()){
		var containmentAss = block2_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block3_variant.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block2_variant,
	                              true,
	                              UML!AggregationKind#none,
	                              block2_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}
	if (not block3_base.isUndefined()) {
		var containmentAss = block2_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block3_base.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block3_base,
	                              true,
	                              UML!AggregationKind#none,
	                              block2_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}

	if(not block4_variant.isUndefined()){
		var containmentAss = block3_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block3_variant.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block3_variant,
	                              true,
	                              UML!AggregationKind#none,
	                              block3_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}
	if (not block4_base.isUndefined()) {
		var containmentAss = block3_base.createAssociation(true,
	                              UML!AggregationKind#composite,//AggregationKind end1Aggregation,
	                              block4_base.name.toLowerCase().trim(),//java.lang.String end1Name,
	                              1,//int end1Lower,
	                              1,//int end1Upper,
	                              block4_base,
	                              true,
	                              UML!AggregationKind#none,
	                              block3_base.name.toLowerCase().trim(),
	                              1,
	                              1);
		//m.packagedElement.add(containmentAss);
		//containmentAss.println();
	}

}



"DONE".println();
	blocks1.println();
	blocks2.println();
	blocks3.println();
	blocks4.println();

operation UML!Class isDesignUnit() {
	return self.appliedStereotypes.exists(s|s.name = "Design Unit");
}

operation UML!Class isBlock() {
	return self.appliedStereotypes.exists(s|s.name = "Block");
}

operation UML!Class isVariant() {
	return self.appliedStereotypes.exists(s|s.name = "Variant");
}

